DOCUMENTATION FOR PROJECT METRIX

DTG 20180210.1205 Adds columns used for gateway and proportional analysis
DTG 20180203.0707 Added tentative analysis scoring method.
DTG 20180203.0645 Adds Market object 
		and resolves ambiguity in handling of ThinkOrSwim data
DTG 20180201.1742 First version


I. Purpose; 

Metrix imports data from csv files downloaded from two sources: The analytical site Zacks.com and the ThinkOrSwim platform at my brokerage, TDAmeritrade.com, combines tables and eliminates unneeded columns, links the tables together use the stock symbols column as the key, analyzes the data according to my method of using metrics, and writes a report to disk as an csv file suitable for import into Google Sheets. Updated daily in the morning.

II. Major structures and external dependencies:
Metrix uses three major data sets as inpout and three objects based on a single class to hold and manipulate in imported data
within the code.

	A. Earns, a calendar of earnings, typically spanning a week. Note that it has earnings times of day (am, pm, xm) but
	not the earnings date, which comes from the data referenced in II.B below. The number records varies depending upon
	whether an earnings season is in progress. Updated once a week.
	
		1. Dependency: Zacks' earnings calendar, consisting of six files saved manually 
			to the disk and then combined using the module calfile.py
		2. Import file: e.csv
		3. Target object: earns.
		
	B. Zacks, a table of analytics, especially the Earnings Surprise Predictor and Zacks Rank. It contains the date of the
	earnings announcement (in the form yyyymmdd) but not the time of day. Typically produces about 7,000 records.
	
		1. Dependency: Zacks Stock Screener, using a custom screen that limits results to symbols with a volume of 500 shares or greater. 
		2. Import file: z.csv
		3. Target object: zacks.
		
	C. Market, a list of data ana analytics from the ThinkOrSwim (ToS) trading platofrm run by TDAmeritrade. In order to work properly, ToS reuires that I copy a list of symbols, paste them into a Watchlist on the platform, and then download the result. This will require a pause in the program.
	
		1. Dependency: A ThinkOrSwim watchlist.
		2. Import file: m.csv
		3. Target object: Market.
	
	D. Weeklys, a list of symbols having weekly options, updated once every three months.
		1. Dependency: The Chicago Board of Options Exchange (CBOE) site.
		2. Import file. weeklys.csv
		3. Target object: Weeklys.

III. The flow:

	A. Earnings calendar data creation and acquisiton
		1. Save daily earnings calendar information from Zacks to a dedicated folder called "cal" (for calendar) 
		2. Copy the daily files into a single file named calendar.csv.
		3. Acquire the single file for the Calendar object, importing it from the disk into a pandas DataFrame
	
	B. Zacks data creation and acquision
		1. Create current analytial data from Zacks through a query on the Stock Screenerusing a singe parameter:
		AverageVolume >= 500.
		2. Save the data to the files folder (root or another place, TBD) under the name zacks.csv.
		3. Acuire the file for the Zacks object, importing it from the disk into a pandas DataFrame
	
	C. Pause the program to await the creation of the external dependency from the ThinkOrSwim platform (see III.E.).
	There are two methods:
		1. Build a pause into the program that allows for a resumption after the dpendency is created 
		in another window. Push a key or give a command to resume.
		2. Exit the program with a message, and then give a command to resume it at the point where the Market object
		data is acquired. This would require a commandline parameter, 
			a. ...perhaps "metrix 1" and "metrix 2", 
			b. ...or assume that absence of a parameter is 1 and only 2 need be made explit
			c. ...or use a next file to determine which it should be, i.e., the first time the program is run
			it is with an implied parameter 1 and the second time, with an implied parameter 2.
			d. TBD.
			
	D. Market daa creation and acquisition
		1. Copy and paste the symbols listed in the Calendar DataFrame into a ThinkOrSwim watchlist.
		2. Save the watchlist to a file called market.csv
		3. Acquire the file for the Market object, importing form the disk into a panda DataFrame
			
	E. Combine the data from Earns, Zacks and Market into an DataFrame that is a property of object Analytics.
		1. Use an Inner Join (one that retains records that are common to both Data Frames) to combine
		the tables, using the Symbols and Ticker columns as the key.
		
	E. Mark symbols having Weeklys options
		Use an Outer Join that preserves the Analytics records entirely.
	
III. Analyzes the combined data, restructuring the Earns... table, scoring the
		metrics used for analysis and restructuring the Earns... table to accommodate
		the analytical results, all in csv format. 
	A. Eliminate unneeded columns from Analytics.
	B. 	Tentative analytics method for proportionals:
		1. Use either all symbols on the earnings calendar OR all symbols in TableZacks
			as a population.
		2. Calculate the percentile and inverse percentile (or quintile and inverse quintile) of each metric for each symbol
			under consideration.
		3. In scoring, use the percentile metric when more is better and the inverse
			percentile metric when less is better.
		4. Either add the percentiles together or take an average to produce an overall 
			score.
	C. Columns used in analysis:
		1. Gateways
			a. FTtrend to select the direction of the trade
			b. Weeklys to select liquid options suitable for trading
			c. FTtrend/ESP mismatch
		2. Proportionals
			a. IVP
			b. ESP
			c. Rank
			d. FT distance from zero
	
		
IV. Program terminates, and operator uploads it to Google Sheet as input into the trading routine.
